[{"C:\\Users\\KIIT\\superchat\\src\\index.js":"1","C:\\Users\\KIIT\\superchat\\src\\App.js":"2","C:\\Users\\KIIT\\superchat\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":1607666918019,"results":"4","hashOfConfig":"5"},{"size":2755,"mtime":1610033282950,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1607666918019,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"ufqze2",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\KIIT\\superchat\\src\\index.js",[],["16","17"],"C:\\Users\\KIIT\\superchat\\src\\App.js",["18"],"import React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB8UTMOVLTXFi0gF_CL8UUqnagCCOXY42k\",\n  authDomain: \"superchat-app-12956.firebaseapp.com\",\n  projectId: \"superchat-app-12956\",\n  storageBucket: \"superchat-app-12956.appspot.com\",\n  messagingSenderId: \"357168777937\",\n  appId: \"1:357168777937:web:922ad33ba9afb06017d3f0\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h1>‚öõÔ∏èüî•üí¨  React-Firebase Chatroom</h1>\n      <SignOut />\n      </header>\n      <section>\n        {user ? <Chatroom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n   auth.signInWithPopup(provider);\n  }\n  return(\n    <button onClick = {signInWithGoogle}> Sign In with Google</button>\n  )\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button onClick = {() => auth.signOut()} Sign Out>SignOut</button>\n  )\n}\n\nfunction Chatroom() {\n\n  const dummy = useRef();\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  const [formValue, setFormValue] = useState();\n\n  const sendMessage = async(e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text : formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n\n    setFormValue('');\n    \n    dummy.current.scrollIntoView({ behaviour: 'smooth'});\n  }\n\n  return (\n    <>\n    <main>\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      <div ref={dummy}></div>\n    </main>\n    <form onSubmit={sendMessage}>\n      <input valur={formValue} onChange={(e) => setFormValue(e.target.value)} />\n\n      <button  type=\"submit\"> Send</button>\n\n    </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props) {\n  const {text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'recieved';\n\n  return (\n  <div className={`message ${messageClass}`}>\n    <img src={ photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n    <p>{text}</p>\n  </div>\n  )\n}\n\nexport default App;\n","C:\\Users\\KIIT\\superchat\\src\\reportWebVitals.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":111,"column":5,"nodeType":"25","endLine":111,"endColumn":87},"no-native-reassign",["26"],"no-negated-in-lhs",["27"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]